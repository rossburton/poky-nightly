#! /bin/bash

# Script to update a Poky checkout, checkout origin/master, fetch all
# sources, and then build the Sato image.  Fetches into an existing clone
# but then works in a scratch clone to ensure a pristine origin/master
# build.

set -e

# Where the script is (TODO: get this from $0?)
NIGHTLY=$HOME/Yocto/poky-nightly

# Where the existing Poky checkout is
POKY=$HOME/Yocto/poky

# Where to put the scratch clone
WORKING=/data/


# If no arguments do everything, otherwise do what we're asked
if [ $# -eq 0 ]; then
	DO_FETCH=true
	DO_SOURCES=true
	DO_BUILD=true
else
	DO_FETCH=false
	DO_SOURCES=false
	DO_BUILD=false
fi

while getopts fsbh o
do
	case "$o" in
		# Fetch
		f) DO_FETCH=true;;
		# Sources
		s) DO_SOURCES=true;;
		# Build
		b) DO_BUILD=true;;
		h) echo >&2 "Usage: $0 -f (fetch) -s (sources) -b (build) -h (help)"
		   echo >&2 "No arguments means everything"
		   exit 1;;
	esac
done

# Need to unset the arguments so that oe-init-build-env doesn't think we
# want to use -b as the build dir.
while shift; do true; done


# Let's do it!

cd $POKY

# Fetch latest changes. Assumes that a git fetch will work without any SSH
# passphrases, so a insteadOf/pushInsteadOf alias is probably a good idea.
if $DO_FETCH; then
	echo -e \\n\\nFetching latest commits...\\n
	git fetch origin -v
fi

# Create the working repository
REPO=$(mktemp --tmpdir=$WORKING --directory nightly-build-XXX)
echo Using $REPO as working repository

# Checkout origin/master.  Assume that git-new-workdir is on $PATH. 
# new-workdir demands that the directory doesn't exist so delete it and hope
# we won't race here.
rm -r $REPO
git new-workdir $POKY $REPO
cd $REPO
git checkout --quiet origin/master

# Initialise Poky
mkdir --parents $REPO/build/conf/
cp $NIGHTLY/local.conf $REPO/build/conf/
. oe-init-build-env >/dev/null


# Do a universe fetch to ensure we have all sources
if $DO_SOURCES; then
	echo -e \\n\\nFetching all sources...\\n
	bitbake -c fetchall universe | grep -v "NOTE: " || /bin/true
fi

MACHINES="atom-pc qemuarm"
TARGETS="packagegroup-core-x11-sato"

# Build the targets
if $DO_BUILD; then
	for MACHINE in $MACHINES; do
		export MACHINE
		echo -e \\n\\nBuilding $TARGETS for $MACHINE...\\n
		bitbake --continue $TARGETS || /bin/true
	done
fi


# Remove the working repository
rm -rf $REPO
