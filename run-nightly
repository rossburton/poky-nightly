#! /bin/bash

# Script to update a Poky checkout, checkout origin/master, fetch all
# sources, and then build the Sato image.  Fetches into an existing clone
# but then works in a scratch clone to ensure a pristine origin/master
# build.

set -e

# Where the script is (TODO: get this from $0?)
NIGHTLY=$HOME/Yocto/poky-nightly

# Where the existing checkouts are
VCSROOT=$HOME/Yocto

# Where to put the scratch clone
WORKING=/data/


# If no arguments do everything, otherwise do what we're asked
if [ $# -eq 0 ]; then
	DO_FETCH=true
	DO_SOURCES=true
	DO_BUILD=true
	DO_SHELL=false
else
	DO_FETCH=false
	DO_SOURCES=false
	DO_BUILD=false
	DO_SHELL=false
fi

while getopts fsbhd o
do
	case "$o" in
		# Fetch
		f) DO_FETCH=true;;
		# Sources
		s) DO_SOURCES=true;;
		# Build
		b) DO_BUILD=true;;
		# Debug shell
		d)
		   DO_FETCH=false
		   DO_SOURCES=false
		   DO_BUILD=false
		   DO_SHELL=true
		   ;;
		h) echo >&2 "Usage: $0 -f (fetch) -s (sources) -b (build) -d (debug shell) -h (help)"
		   echo >&2 "No arguments means everything"
		   exit 1;;
	esac
done

# Need to unset the arguments so that oe-init-build-env doesn't think we
# want to use -b as the build dir.
while shift; do true; done

WORKDIR=$(mktemp --tmpdir=$WORKING --directory nightly-build-XXX)
echo Using $WORKDIR as working directory

# Fetch origin and create a new clone based on origin/master.
checkout_repo() {
	SOURCE=$1
        NAME=$(basename $1)
	cd $SOURCE

	# Fetch latest changes. Assumes that a git fetch will work without any
	# SSH passphrases, so a insteadOf/pushInsteadOf alias is probably a good
	# idea.
	if $DO_FETCH; then
		echo -e \\n\\nFetching latest commits in $NAME...\\n
		git fetch origin -v
	fi

	# Checkout origin/master.  Assume that git-new-workdir is on $PATH.
        REPO=$WORKDIR/$NAME
	git new-workdir $SOURCE $REPO
	cd $REPO
	git checkout --quiet origin/master
}


checkout_repo $VCSROOT/poky
checkout_repo $VCSROOT/meta-intel

# Initialise Poky
cd $WORKDIR/poky
mkdir --parents $WORKDIR/poky/build/conf/
cp $NIGHTLY/local.conf $WORKDIR/poky/build/conf/
sed -e "s|@WORKDIR@|${WORKDIR}|g" <$NIGHTLY/bblayers.conf.in >$WORKDIR/poky/build/conf/bblayers.conf
. oe-init-build-env >/dev/null

# Run an debug shell
if $DO_SHELL; then
    echo Entering a debug shell...
    export PS1_PREFIX="(nightly) "
    bash -i || /bin/true
fi

# Do a universe fetch to ensure we have all sources
if $DO_SOURCES; then
	echo -e \\n\\nFetching all sources...\\n
	bitbake -c fetchall universe | grep -v "NOTE: " || /bin/true
fi

# Build the targets
if $DO_BUILD; then
	MACHINES="nuc qemux86 qemuarm"
	TARGETS="core-image-sato"
	for MACHINE in $MACHINES; do
		export MACHINE
		echo -e \\n\\nBuilding $TARGETS for $MACHINE...\\n
		bitbake --continue $TARGETS || /bin/true
	done
fi


# Remove the working repository
rm -rf $WORKDIR
